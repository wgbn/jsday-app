!function(){"use strict";function e(e,t,a){function o(e){return a.parseShortDateToStr(e)}function n(){e.palestras=t.getPalestras()}e.parseDateToStr=o,n()}angular.module("jsday").controller("HomeCtrl",e),e.$inject=["$scope","fireService","Utils"]}(),function(){"use strict";function e(e,t,a,o,n,r,i,c,s,l){function u(){c.getLocalStorage(o.key)?(e.rate.avaliacao=c.getLocalStorage(o.key),s.show("Você já avaliou esta palestra.","bottom",!1,2500)):(e.palestra.avaliacao+=e.rate.avaliacao,i.updatePalestra(e.palestra,"avaliacao"),c.setLocalStorage(o.key,e.rate.avaliacao))}function m(){a.go("home")}function p(t,a){a.palestra==e.key&&d()}function d(){l.getByPalestra(e.key).then(function(t){e.notas=t})}function f(){var t=new Date;if(e.palestra.hora<=t.getTime()){n.show({template:'<input type="text" ng-model="comentario.nome" placeholder="Seu nome..." class="com-input"><input type="text" ng-model="comentario.email" placeholder="Seu e-mail..." class="com-input"><textarea ng-model="comentario.texto" placeholder="Comentário..." class="com-text"></textarea>',title:"Faça um comentário",subTitle:"Deixe aqui sua opinião sobre esta palestra",scope:e,buttons:[{text:"Cancelar"},{text:"<b>OK</b>",type:"button-energized",onTap:function(t){return e.comentario.nome&&e.comentario.email&&e.comentario.texto?(e.comentarios=i.addComentario(e.palestra,e.comentario),e.comentario={},!0):(t.preventDefault(),void s.show("Preencha todos os espaços.","bottom",!1,1500))}}]})}else s.show("Você só poderá comengar após o início da palestra.","bottom",!1,2500)}function g(a){r.show({destructiveText:"Excluir",titleText:"O que deseja fazer?",cancelText:"Cancel",cssClass:"sheets",cancel:function(){},buttonClicked:function(e){return!0},destructiveButtonClicked:function(){return l.remove(a).then(function(){t.$broadcast("notaAdded",{palestra:e.key})}),!0}})}function h(){var t=new Date;return t.getTime()>=e.palestra.hora&&e.palestra.slide}function v(e){var t=e.valor;"social-twitter"==e.tipo&&(t="http://twitter.com/"+t.replace("@","")),window.open(t,"_system")}e.key=o.key,e.palestra=i.getPalestra(o.key),e.rate={},e.rate.avaliacao=c.getLocalStorage(o.key)?c.getLocalStorage(o.key):0,e.rate.max=5,e.notas=[],e.btnComentario=!1,e.comentario={},e.comentarios=i.getComentarios(e.palestra),e.showSlides=h(),e.rateClick=u,e.btnVoltar=m,e.addClick=f,e.onHoldNota=g,e.goToUrl=v,e.$on("notaAdded",p),d()}angular.module("jsday").controller("PalestraCtrl",e),e.$inject=["$scope","$rootScope","$state","$stateParams","$ionicPopup","$ionicActionSheet","fireService","Utils","ionicToast","noteService"]}();
//# sourceMappingURL=data:application/json;base64,

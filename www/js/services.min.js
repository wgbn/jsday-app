!function(){"use strict";function e(e,t,n,o,r){function a(){var e=n.defer();if(console.info("connect() isConnecting_",f),f===!1){var t={storeType:lf.schema.DataStoreType.INDEXED_DB};(ionic.Platform.isIOS()||ionic.Platform.isAndroid())&&(t={storeType:lf.schema.DataStoreType.WEB_SQL}),null===d.db_?(f=!0,c().connect(t).then(function(t){f=!1,d.db_=t,d.noteTable_=d.db_.getSchema().table(r.Note),window.db=t,e.resolve()})):e.resolve()}else e.reject("Still connecting to the database");return e.promise}function i(){var e=n.defer();return d.db_.select().from(d.noteTable_).exec().then(function(t){e.resolve(t.length>0)}),e.promise}function c(){var e=lf.schema.create("jsday-notas",1);return e.createTable(r.Note).addColumn("id",lf.Type.INTEGER).addColumn("palestra",lf.Type.STRING).addColumn("text",lf.Type.STRING).addPrimaryKey(["id"]).addIndex("idx_palestra",["palestra"]),e}function u(){t.debug("Attempt to connect to and seed the database"),a().then(function(){o.$broadcast("lovefield-starter-event:dbConnected"),i().then(function(e){})})}var s=null,l=null,f=!1,d={db_:s,noteTable_:l,connect:a,initDatabase:u};return d}angular.module("jsday").factory("dbService",e),e.$inject=["$http","$log","$q","$rootScope","TABLE"]}(),function(){"use strict";function e(e,t,n,o){function r(){n.show({template:"Carregando..."}),f.$loaded(function(e){n.hide()},function(e){n.hide(),o.alert({title:"Ops!",template:'<div style="text-align: center;">Não foi possível carregar os dados.<br>Verifique sua conexão.</div>',okType:"button-energized"})})}function a(){return f}function i(e){var t=null;return f.forEach(function(n){n.$id==e&&(t=n)}),t}function c(e){f.$add(e)}function u(e,t){l.child("palestras").child(e.$id).child(t).set(e[t])}function s(e){console.info(e)}var l=new Firebase("https://jsday-app.firebaseio.com"),f=e(l.child("palestras")),d={getPalestras:a,getPalestra:i,addPalestra:c,updatePalestra:u,testeObject:s};return r(),d}angular.module("jsday").factory("fireService",e),e.$inject=["$firebaseArray","Utils","$ionicLoading","$ionicPopup"]}(),function(){"use strict";function e(e,t,n){function o(e,o){var r=t.defer();return n.connect().then(function(){var t=new Date,a=n.noteTable_.createRow({id:t.getTime(),palestra:e,text:o});n.db_.insertOrReplace().into(n.noteTable_).values([a]).exec().then(function(){r.resolve()})}),r.promise}function r(e,o){var r=t.defer();return n.connect().then(function(){n.db_.update(n.noteTable_).set(n.noteTable_.text,o).where(n.noteTable_.id.eq(e)).exec().then(function(){r.resolve()})}),r.promise}function a(){var e=t.defer();return n.connect().then(function(){n.db_.select().from(n.noteTable_).exec().then(function(t){e.resolve(t)})},function(e){console.error("Failed: ",e)}),e.promise}function i(o){var r=t.defer();return n.connect().then(function(){n.db_.select().from(n.noteTable_).where(n.noteTable_.id.eq(o)).exec().then(function(t){angular.isDefined(t)&&1===t.length?r.resolve(t[0]):(e.error("Note not found with id of: "+o,t),r.reject())})}),r.promise}function c(e){var o=t.defer();return n.connect().then(function(){n.db_.select().from(n.noteTable_).where(n.noteTable_.palestra.eq(e)).exec().then(function(e){o.resolve(e)})}),o.promise}function u(e){var o=t.defer();return n.connect().then(function(){n.db_["delete"]().from(n.noteTable_).where(n.noteTable_.id.eq(e)).exec().then(function(){o.resolve()})}),o.promise}var s={add:o,edit:r,getAll:a,getById:i,getByPalestra:c,remove:u};return s}angular.module("jsday").factory("noteService",e),e.$inject=["$log","$q","dbService"]}(),function(){"use strict";function e(e){function o(e){return new t}function r(e){return new n}var a={newAutor:r,newPalestra:o};return a}angular.module("jsday").factory("objectsFactory",e),e.$inject=["fireService"];var t=function(e){function t(e,t,n){this.nome="",this.hora="",this.autor=""}return t.prototype.toString=function(){return this.nome},t.prototype.toJsonObject=function(){return{nome:this.nome,hora:this.hora}},t.prototype.save=function(){e.testeObject(this.toJsonObject())},t}(fireService),n=function(){function e(e){this.nome=e}return e.prototype.toString=function(){return this.nome},e}()}(),function(){"use strict";function e(){function e(e,t){t=t||!1;var e=e.split(" "),n=new Date(e[0].split("/")[2],parseInt(e[0].split("/")[1])-1,e[0].split("/")[0],t?e[1].split(":")[0]:0,t?e[1].split(":")[1]:0,0,0);return n.getTime()}function t(e,t){t=t||!1;var n=new Date(e);return(n.getDate()<10?"0"+n.getDate():n.getDate())+"/"+(n.getMonth()+1<10?"0"+(n.getMonth()+1):n.getMonth()+1)+"/"+n.getFullYear().toString()+(t?" "+n.getHours().toString()+":"+n.getMinutes().toString():"")}function n(e){var t=new Date(e);return(t.getHours()<10?"0"+t.getHours():t.getHours())+":"+(t.getMinutes()<10?"0"+t.getMinutes():t.getMinutes())}function o(e){var t=new Date(e);return(t.getDate()<10?"0"+t.getDate():t.getDate())+"/"+(t.getMonth()+1<10?"0"+(t.getMonth()+1):t.getMonth()+1)}function r(e,t){localStorage.setItem(e,JSON.stringify(t))}function a(e){return JSON.parse(localStorage.getItem(e))}var i={parseStrToDate:e,parseDateToStr:t,parseTimeToStr:n,parseShortDateToStr:o,setLocalStorage:r,getLocalStorage:a};return i}angular.module("jsday").factory("Utils",e)}();
//# sourceMappingURL=data:application/json;base64,

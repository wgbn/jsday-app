!function(){"use strict";function e(e,t,n,o,r){function a(){var e=n.defer();if(console.info("connect() isConnecting_",d),d===!1){var t={storeType:lf.schema.DataStoreType.INDEXED_DB};(ionic.Platform.isIOS()||ionic.Platform.isAndroid())&&(t={storeType:lf.schema.DataStoreType.WEB_SQL}),null===f.db_?(d=!0,c().connect(t).then(function(t){d=!1,f.db_=t,f.noteTable_=f.db_.getSchema().table(r.Note),window.db=t,e.resolve()})):e.resolve()}else e.reject("Still connecting to the database");return e.promise}function i(){var e=n.defer();return f.db_.select().from(f.noteTable_).exec().then(function(t){e.resolve(t.length>0)}),e.promise}function c(){var e=lf.schema.create("jsday-notas",1);return e.createTable(r.Note).addColumn("id",lf.Type.INTEGER).addColumn("palestra",lf.Type.STRING).addColumn("text",lf.Type.STRING).addPrimaryKey(["id"]).addIndex("idx_palestra",["palestra"]),e}function s(){t.debug("Attempt to connect to and seed the database"),a().then(function(){o.$broadcast("lovefield-starter-event:dbConnected"),i().then(function(e){})})}var l=null,u=null,d=!1,f={db_:l,noteTable_:u,connect:a,initDatabase:s};return f}angular.module("jsday").factory("dbService",e),e.$inject=["$http","$log","$q","$rootScope","TABLE"]}(),function(){"use strict";function e(e,t,n,o,r){function a(){return _}function i(){o.show({template:"Carregando..."}),T.$loaded(function(e){o.hide()},function(e){o.hide(),r.alert({title:"Ops!",template:'<div style="text-align: center;">Não foi possível carregar os dados.<br>Verifique sua conexão.</div>',okType:"button-energized"})})}function c(){return T}function s(){return v}function l(e){var t=!1;return v.forEach(function(n){n.$id==e&&(t=n)}),t}function u(e){var t=null;return T.forEach(function(n){n.$id==e&&(t=n)}),t}function d(e){T.$add(e)}function f(e,t){g.child("palestras").child(e.$id).child(t).set(e[t])}function p(e,t){var n=new Date;return t.registro=n.getTime(),e.comentarios=e.comentarios||{},e.comentarios[n.getTime().toString()]=t,g.child("palestras").child(e.$id).child("comentarios").child(n.getTime().toString()).set(t),m(e)}function m(e){if(!e.comentarios)return{};var t=[];return Object.keys(e.comentarios).forEach(function(n){t.push(e.comentarios[n])}),t}function h(){return y}var b={apiKey:"AIzaSyBdYNwQollKcyF6hQaJCfsVwKA0_GMi9Yc",authDomain:"jsday-app.firebaseapp.com",databaseURL:"https://jsday-app.firebaseio.com",storageBucket:"jsday-app.appspot.com"},g=(firebase.initializeApp(b),firebase.database().ref()),v=e(g.child("trilhas").orderByChild("timestamp")),T=e(g.child("palestras").orderByChild("hora")),y=e(g.child("workshops")),_=t(g.child("appConfig")),S={getAppConfig:a,getTrilhas:s,getTrilha:l,getPalestras:c,getPalestra:u,getComentarios:m,getWorkshops:h,addPalestra:d,addComentario:p,updatePalestra:f};return i(),S}angular.module("jsday").factory("fireService",e),e.$inject=["$firebaseArray","$firebaseObject","Utils","$ionicLoading","$ionicPopup"]}(),function(){"use strict";function e(e,t,n){function o(e,o){var r=t.defer();return n.connect().then(function(){var t=new Date,a=n.noteTable_.createRow({id:t.getTime(),palestra:e,text:o});n.db_.insertOrReplace().into(n.noteTable_).values([a]).exec().then(function(){r.resolve()})}),r.promise}function r(e,o){var r=t.defer();return n.connect().then(function(){n.db_.update(n.noteTable_).set(n.noteTable_.text,o).where(n.noteTable_.id.eq(e)).exec().then(function(){r.resolve()})}),r.promise}function a(){var e=t.defer();return n.connect().then(function(){n.db_.select().from(n.noteTable_).exec().then(function(t){e.resolve(t)})},function(e){console.error("Failed: ",e)}),e.promise}function i(o){var r=t.defer();return n.connect().then(function(){n.db_.select().from(n.noteTable_).where(n.noteTable_.id.eq(o)).exec().then(function(t){angular.isDefined(t)&&1===t.length?r.resolve(t[0]):(e.error("Note not found with id of: "+o,t),r.reject())})}),r.promise}function c(e){var o=t.defer();return n.connect().then(function(){n.db_.select().from(n.noteTable_).where(n.noteTable_.palestra.eq(e)).exec().then(function(e){o.resolve(e)})}),o.promise}function s(e){var o=t.defer();return n.connect().then(function(){n.db_["delete"]().from(n.noteTable_).where(n.noteTable_.id.eq(e)).exec().then(function(){o.resolve()})}),o.promise}var l={add:o,edit:r,getAll:a,getById:i,getByPalestra:c,remove:s};return l}angular.module("jsday").factory("noteService",e),e.$inject=["$log","$q","dbService"]}(),function(){"use strict";function e(){function e(e,t){t=t||!1;var e=e.split(" "),n=new Date(e[0].split("/")[2],parseInt(e[0].split("/")[1])-1,e[0].split("/")[0],t?e[1].split(":")[0]:0,t?e[1].split(":")[1]:0,0,0);return n.getTime()}function t(e,t){return t=t||!1,moment(e).format(t?"DD/MM/YYYY HH:mm":"DD/MM/YYYY")}function n(e){new Date(e);return moment(e).format("HH:mm")}function o(e){new Date(e);return moment(e).format("DD/MM")}function r(e,t){localStorage.setItem(e,JSON.stringify(t))}function a(e){return JSON.parse(localStorage.getItem(e))}var i={parseStrToDate:e,parseDateToStr:t,parseTimeToStr:n,parseShortDateToStr:o,setLocalStorage:r,getLocalStorage:a};return i}angular.module("jsday").factory("Utils",e)}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRic2VydmljZS5qcyIsImZpcmViYXNlU2VydmljZS5qcyIsIm5vdGVzZXJ2aWNlLmpzIiwidXRpbHMuanMiXSwibmFtZXMiOlsiZGJTZXJ2aWNlIiwiJGh0dHAiLCIkbG9nIiwiJHEiLCIkcm9vdFNjb3BlIiwiVEFCTEUiLCJjb25uZWN0IiwiZGVmZXJyZWQiLCJkZWZlciIsImNvbnNvbGUiLCJpbmZvIiwiaXNDb25uZWN0aW5nXyIsImNvbm5lY3Rpb25PcHRpb25zIiwic3RvcmVUeXBlIiwibGYiLCJzY2hlbWEiLCJEYXRhU3RvcmVUeXBlIiwiSU5ERVhFRF9EQiIsImlvbmljIiwiUGxhdGZvcm0iLCJpc0lPUyIsImlzQW5kcm9pZCIsIldFQl9TUUwiLCJzZXJ2aWNlIiwiZGJfIiwiYnVpbGRTY2hlbWEiLCJ0aGVuIiwiZGF0YWJhc2UiLCJub3RlVGFibGVfIiwiZ2V0U2NoZW1hIiwidGFibGUiLCJOb3RlIiwid2luZG93IiwiZGIiLCJyZXNvbHZlIiwicmVqZWN0IiwicHJvbWlzZSIsImNoZWNrRm9yRXhpc3RpbmdEYXRhIiwic2VsZWN0IiwiZnJvbSIsImV4ZWMiLCJyb3dzIiwibGVuZ3RoIiwic2NoZW1hQnVpbGRlciIsImNyZWF0ZSIsImNyZWF0ZVRhYmxlIiwiYWRkQ29sdW1uIiwiVHlwZSIsIklOVEVHRVIiLCJTVFJJTkciLCJhZGRQcmltYXJ5S2V5IiwiYWRkSW5kZXgiLCJpbml0RGF0YWJhc2UiLCJkZWJ1ZyIsIiRicm9hZGNhc3QiLCJkYXRhRXhpc3RzIiwiYW5ndWxhciIsIm1vZHVsZSIsImZhY3RvcnkiLCIkaW5qZWN0IiwiZmlyZVNlcnZpY2UiLCIkZmlyZWJhc2VBcnJheSIsIiRmaXJlYmFzZU9iamVjdCIsIlV0aWxzIiwiJGlvbmljTG9hZGluZyIsIiRpb25pY1BvcHVwIiwiX2dldEFwcENvbmZpZyIsImFwcENvbmZpZyIsIl9sb2FkaW5nIiwic2hvdyIsInRlbXBsYXRlIiwic3luYyIsIiRsb2FkZWQiLCJvayIsImhpZGUiLCJlcnJvIiwiYWxlcnQiLCJ0aXRsZSIsIm9rVHlwZSIsIl9nZXRQYWxlc3RyYXMiLCJfZ2V0VHJpbGhhcyIsInRyaWxoYXMiLCJfZ2V0VHJpbGhhIiwiX2lkIiwicmVzdWx0IiwiZm9yRWFjaCIsIl90IiwiJGlkIiwiX2dldFBhbGVzdHJhIiwiX2tleSIsIl92YWwiLCJfYWRkUGFsZXN0cmEiLCJfcGFsZXN0cmEiLCIkYWRkIiwiX3VwZGF0ZVBhbGVzdHJhIiwiX2l0ZW0iLCJjaGlsZCIsInNldCIsIl9hZGRDb21lbnRhcmlvIiwiX2NvbWVudGFyaW8iLCJfZHQiLCJEYXRlIiwicmVnaXN0cm8iLCJnZXRUaW1lIiwiY29tZW50YXJpb3MiLCJ0b1N0cmluZyIsIl9nZXRDb21lbnRhcmlvcyIsInJlcyIsIk9iamVjdCIsImtleXMiLCJwdXNoIiwiX2dldFdvcmtzaG9wcyIsIndvcmtzaG9wcyIsImNvbmZpZyIsImFwaUtleSIsImF1dGhEb21haW4iLCJkYXRhYmFzZVVSTCIsInN0b3JhZ2VCdWNrZXQiLCJmaXJlYmFzZSIsImluaXRpYWxpemVBcHAiLCJyZWYiLCJvcmRlckJ5Q2hpbGQiLCJfcmV0dXJuIiwiZ2V0QXBwQ29uZmlnIiwiZ2V0VHJpbGhhcyIsImdldFRyaWxoYSIsImdldFBhbGVzdHJhcyIsImdldFBhbGVzdHJhIiwiZ2V0Q29tZW50YXJpb3MiLCJnZXRXb3Jrc2hvcHMiLCJhZGRQYWxlc3RyYSIsImFkZENvbWVudGFyaW8iLCJ1cGRhdGVQYWxlc3RyYSIsIm5vdGVTZXJ2aWNlIiwiYWRkIiwicGFsZXN0cmEiLCJ0ZXh0IiwiX2hvamUiLCJyb3ciLCJjcmVhdGVSb3ciLCJpZCIsImluc2VydE9yUmVwbGFjZSIsImludG8iLCJ2YWx1ZXMiLCJlZGl0IiwidXBkYXRlIiwid2hlcmUiLCJlcSIsImdldEFsbCIsInJlYXNvbiIsImVycm9yIiwiZ2V0QnlJZCIsInJlc3VsdHMiLCJpc0RlZmluZWQiLCJnZXRCeVBhbGVzdHJhIiwicmVtb3ZlIiwiX3BhcnNlU3RyVG9EYXRlIiwiX2RhdGUiLCJfdGltZSIsInNwbGl0IiwicGFyc2VJbnQiLCJfcGFyc2VEYXRlVG9TdHIiLCJtb21lbnQiLCJmb3JtYXQiLCJfcGFyc2VUaW1lVG9TdHIiLCJfcGFyc2VTaG9ydERhdGVUb1N0ciIsIl9zZXRMb2NhbFN0b3JhZ2UiLCJfdmFsb3IiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsIl9nZXRMb2NhbFN0b3JhZ2UiLCJwYXJzZSIsImdldEl0ZW0iLCJwYXJzZVN0clRvRGF0ZSIsInBhcnNlRGF0ZVRvU3RyIiwicGFyc2VUaW1lVG9TdHIiLCJwYXJzZVNob3J0RGF0ZVRvU3RyIiwic2V0TG9jYWxTdG9yYWdlIiwiZ2V0TG9jYWxTdG9yYWdlIl0sIm1hcHBpbmdzIjoiQ0FPQSxXQUNBLFlBUUEsU0FBQUEsR0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FpQ0EsUUFBQUMsS0FDQSxHQUFBQyxHQUFBSixFQUFBSyxPQUlBLElBRkFDLFFBQUFDLEtBQUEsMEJBQUFDLEdBRUFBLEtBQUEsRUFBQSxDQUVBLEdBQUFDLElBQUFDLFVBQUFDLEdBQUFDLE9BQUFDLGNBQUFDLGFBQ0FDLE1BQUFDLFNBQUFDLFNBQUFGLE1BQUFDLFNBQUFFLGVBQ0FULEdBQUFDLFVBQUFDLEdBQUFDLE9BQUFDLGNBQUFNLFVBR0EsT0FBQUMsRUFBQUMsS0FDQWIsR0FBQSxFQUNBYyxJQUNBbkIsUUFBQU0sR0FDQWMsS0FBQSxTQUNBQyxHQUNBaEIsR0FBQSxFQUNBWSxFQUFBQyxJQUFBRyxFQUNBSixFQUFBSyxXQUFBTCxFQUFBQyxJQUFBSyxZQUFBQyxNQUFBekIsRUFBQTBCLE1BQ0FDLE9BQUFDLEdBQUFOLEVBQ0FwQixFQUFBMkIsYUFHQTNCLEVBQUEyQixjQUdBM0IsR0FBQTRCLE9BQUEsbUNBR0EsT0FBQTVCLEdBQUE2QixRQVFBLFFBQUFDLEtBQ0EsR0FBQTlCLEdBQUFKLEVBQUFLLE9BUUEsT0FOQWUsR0FBQUMsSUFBQWMsU0FBQUMsS0FBQWhCLEVBQUFLLFlBQUFZLE9BQUFkLEtBQ0EsU0FBQWUs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QTJFLEdBRUFBLEVBQUExRSxTQUFBLE9BQUEsS0FBQSxnQkNQQSxXQUNBLFlBbUJBLFNBQUFJLEtBcUJBLFFBQUE2RixHQUFBQyxFQUFBQyxHQUNBQSxFQUFBQSxJQUFBLENBQ0EsSUFBQUQsR0FBQUEsRUFBQUUsTUFBQSxLQUNBM0UsRUFBQSxHQUFBaUIsTUFDQXdELEVBQUEsR0FBQUUsTUFBQSxLQUFBLEdBQ0FDLFNBQUFILEVBQUEsR0FBQUUsTUFBQSxLQUFBLElBQUEsRUFDQUYsRUFBQSxHQUFBRSxNQUFBLEtBQUEsR0FDQUQsRUFBQUQsRUFBQSxHQUFBRSxNQUFBLEtBQUEsR0FBQSxFQUNBRCxFQUFBRCxFQUFBLEdBQUFFLE1BQUEsS0FBQSxHQUFBLEVBQ0EsRUFDQSxFQUVBLE9BQUEzRSxHQUFBbUIsVUFZQSxRQUFBMEQsR0FBQUosRUFBQUMsR0FFQSxNQURBQSxHQUFBQSxJQUFBLEVBQ0FJLE9BQUFMLEdBQUFNLE9BQUFMLEVBQUEsbUJBQUEsY0FXQSxRQUFBTSxHQUFBUCxHQUNBLEdBQUF4RCxNQUFBd0QsRUFDQSxPQUFBSyxRQUFBTCxHQUFBTSxPQUFBLFNBV0EsUUFBQUUsR0FBQVIsR0FDQSxHQUFBeEQsTUFBQXdELEVBQ0EsT0FBQUssUUFBQUwsR0FBQU0sT0FBQSxTQVdBLFFBQUFHLEdBQUF2RSxFQUFBd0UsR0FDQUMsYUFBQUMsUUFBQTFFLEVBQUEyRSxLQUFBQyxVQUFBSixJQVdBLFFBQUFLLEdBQUE3RSxHQUNBLE1BQUEyRSxNQUFBRyxNQUFBTCxhQUFBTSxRQUFBL0UsSUFoR0EsR0FBQTJCLElBQ0FxRCxlQUFBbkIsRUFDQW9CLGVBQUFmLEVBQ0FnQixlQUFBYixFQUNBYyxvQkFBQWIsRUFDQWMsZ0JBQUFiLEVBQ0FjLGdCQUFBUixFQUdBLE9BQUFsRCxHQXJCQWxFLFFBQ0FDLE9BQUEsU0FDQUMsUUFBQSxRQUFBSyIsImZpbGUiOiJzZXJ2aWNlcy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgaXMgaW5zcGlyZWQgYnkvcmlwcGVkIG9mZiBmcm9tIHZhcmlvdXMgYml0cyBvZiBMb3ZlRmllbGQgZGVtbyBjb2RlOlxuICogaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZXNhbXBsZXMvaW8yMDE1LWNvZGVsYWJzL2Jsb2IvbWFzdGVyL2xvdmVmaWVsZC9zcmMvZmluYWwvbG92ZWZpZWxkX3NlcnZpY2UuanNcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvbG92ZWZpZWxkL2Jsb2IvbWFzdGVyL2RlbW9zL29seW1waWFfZGIvYW5ndWxhci9kZW1vLmpzXG4gKiBUaGFuayB5b3UhXG4gKi9cblxuKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2pzZGF5JylcbiAgICAgICAgLmZhY3RvcnkoJ2RiU2VydmljZScsIGRiU2VydmljZSk7XG5cbiAgICBkYlNlcnZpY2UuJGluamVjdCA9IFsnJGh0dHAnLCAnJGxvZycsICckcScsICckcm9vdFNjb3BlJywgJ1RBQkxFJ107XG5cbiAgICBmdW5jdGlvbiBkYlNlcnZpY2UoJGh0dHAsICRsb2csICRxLCAkcm9vdFNjb3BlLCBUQUJMRSkge1xuICAgICAgICB2YXIgZGJfID0gbnVsbDtcbiAgICAgICAgdmFyIG5vdGVUYWJsZV8gPSBudWxsO1xuICAgICAgICB2YXIgaXNDb25uZWN0aW5nXyA9IGZhbHNlO1xuXG4gICAgICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgICAgICAgZGJfOiBkYl8sXG4gICAgICAgICAgICBub3RlVGFibGVfOiBub3RlVGFibGVfLFxuXG4gICAgICAgICAgICBjb25uZWN0OiBjb25uZWN0LFxuICAgICAgICAgICAgaW5pdERhdGFiYXNlOiBpbml0RGF0YWJhc2VcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gc2VydmljZTtcblxuICAgICAgICAvLy8vLy8vLy8vLy9cblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbml0aWFsaXplcyBhIGRhdGFiYXNlIGNvbm5lY3Rpb24uXG4gICAgICAgICAqIEByZXR1cm4geyFhbmd1bGFyLiRxLlByb21pc2V9IC0gcHJvbWlzZSBpcyByZXNvbHZlZCB3aGVuIHRoZSBkYl8gYW5kIG5vdGVUYWJsZV8gcHJvcGVydGllcyBoYXZlIGhhZCB2YWx1ZXMgYXNzaWduZWQgdG8gdGhlbVxuICAgICAgICAgKlxuICAgICAgICAgKiBOT1RFOiAyMDE1LzEwLzEwXG4gICAgICAgICAqICAgICAgIFdoZW4gbm8gY29ubmVjdGlvbiBvcHRpb25zIGFyZSBzZXQgTG92ZUZpZWxkIGRvZXMgc29tZSBmZWF0dXJlIGRldGVjdGlvbiB0byBkZXRlcm1pbmUgd2hpY2ggYmFja2luZyBzdG9yZSB0byB1c2UuXG4gICAgICAgICAqICAgICAgIElmIHRoZSBicm93c2VyIHN1cHBvcnRzIEluZGV4ZWREYiBpdCB1c2VzIHRoYXQsIHRoZW4gZmFsbHMgYmFjayB0byBXZWJTcWwgYW5kIGZpbmFsbHkgdG8gYW4gXCJpbiBtZW1vcnlcIiBkYXRhIHN0b3JlLlxuICAgICAgICAgKiAgICAgICBJIGZvdW5kIHdoZW4gZGVidWdnaW5nIG9uIGFjdHVhbCBkZXZpY2VzIHRoYXQgTG92ZUZpZWxkIGNob3NlIHRoZSBpbiBtZW1vcnkgKGxmLnNjaGVtYS5EYXRhU3RvcmVUeXBlLk1FTU9SWSkgc3RvcmVcbiAgICAgICAgICogICAgICAgb24gaU9TIHdoaWNoIGRpZG4ndCB3b3JrIHNvIHdlbGwgc28gaGVyZSB3ZSBlbnN1cmUgV2ViU3FsIGlzIHVzZWQgZm9yIGlPUyBhbmQgQW5kcm9pZCBkZXZpY2VzLlxuICAgICAgICAgKiAgICAgICBJbmRleGVkRGIgc2VlbWVkIHRvIHdvcmsgd2VsbCBvbiBkZXNrdG9wIGJyb3dzZXJzLlxuICAgICAgICAgKiAgICAgICBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2xvdmVmaWVsZC9ibG9iL21hc3Rlci9kb2NzL3NwZWMvMDNfbGlmZV9vZl9kYi5tZCMzMTEtY29ubmVjdC1vcHRpb25zXG4gICAgICAgICAqICAgICAgIGh0dHBzOi8vY29yZG92YS5hcGFjaGUub3JnL2RvY3MvZW4vNS4xLjEvY29yZG92YS9zdG9yYWdlL3N0b3JhZ2UuaHRtbFxuICAgICAgICAgKiAgICAgICBodHRwOi8vY2FuaXVzZS5jb20vI2ZlYXQ9aW5kZXhlZGRiXG4gICAgICAgICAqICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvbG92ZWZpZWxkL2Jsb2IvbWFzdGVyL2RvY3MvZGQvMDJfZGF0YV9zdG9yZS5tZCMyNS13ZWJzcWwtc3RvcmVcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGNvbm5lY3QoKSB7XG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICBjb25zb2xlLmluZm8oJ2Nvbm5lY3QoKSBpc0Nvbm5lY3RpbmdfJywgaXNDb25uZWN0aW5nXyk7XG5cbiAgICAgICAgICAgIGlmIChpc0Nvbm5lY3RpbmdfID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGNvbm5lY3Rpb25PcHRpb25zID0ge3N0b3JlVHlwZTogbGYuc2NoZW1hLkRhdGFTdG9yZVR5cGUuSU5ERVhFRF9EQn07XG4gICAgICAgICAgICAgICAgaWYgKGlvbmljLlBsYXRmb3JtLmlzSU9TKCkgfHwgaW9uaWMuUGxhdGZvcm0uaXNBbmRyb2lkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbk9wdGlvbnMgPSB7c3RvcmVUeXBlOiBsZi5zY2hlbWEuRGF0YVN0b3JlVHlwZS5XRUJfU1FMfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoc2VydmljZS5kYl8gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNDb25uZWN0aW5nXyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkU2NoZW1hKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jb25uZWN0KGNvbm5lY3Rpb25PcHRpb25zKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkYXRhYmFzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0Nvbm5lY3RpbmdfID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2UuZGJfID0gZGF0YWJhc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2Uubm90ZVRhYmxlXyA9IHNlcnZpY2UuZGJfLmdldFNjaGVtYSgpLnRhYmxlKFRBQkxFLk5vdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuZGIgPSBkYXRhYmFzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoJ1N0aWxsIGNvbm5lY3RpbmcgdG8gdGhlIGRhdGFiYXNlJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9XG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2hlY2tzIGlmIGFueSBkYXRhIGV4aXN0cyBpbiB0aGUgREIuXG4gICAgICAgICAqIEByZXR1cm4geyFhbmd1bGFyLiRxLlByb21pc2UuPCFib29sZWFuPn1cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrRm9yRXhpc3RpbmdEYXRhKCkge1xuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgc2VydmljZS5kYl8uc2VsZWN0KCkuZnJvbShzZXJ2aWNlLm5vdGVUYWJsZV8pLmV4ZWMoKS50aGVuKFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChyb3dzKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocm93cy5sZW5ndGggPiAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnNlcnRzIHNlZWQgZGF0YSBpbnRvIHRoZSBEQi5cbiAgICAgICAgICogQHJldHVybiB7IWFuZ3VsYXIuJHEuUHJvbWlzZX1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIC8qZnVuY3Rpb24gaW5zZXJ0U2VlZERhdGEoKSB7XG4gICAgICAgICAgICAkbG9nLmRlYnVnKCdQb3B1bGF0aW5nIGluaXRpYWwgTm90ZSBkYXRhJyk7XG5cbiAgICAgICAgICAgIHZhciB1cmwgPSBcIi4uL2pzL2RhdGEvbm90ZXMuanNvblwiO1xuICAgICAgICAgICAgaWYgKGlvbmljLlBsYXRmb3JtLmlzQW5kcm9pZCgpKSB7XG4gICAgICAgICAgICAgICAgdXJsID0gXCIvYW5kcm9pZF9hc3NldC93d3cvanMvZGF0YS9ub3Rlcy5qc29uXCI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlvbmljLlBsYXRmb3JtLmlzSU9TKCkpIHtcbiAgICAgICAgICAgICAgICB1cmwgPSBcImpzL2RhdGEvbm90ZXMuanNvblwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KHVybCkudGhlbihcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJvd3MgPSByZXNwb25zZS5kYXRhLm1hcChmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VydmljZS5ub3RlVGFibGVfLmNyZWF0ZVJvdyhvYmopO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VydmljZS5kYl8uaW5zZXJ0KClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5pbnRvKHNlcnZpY2Uubm90ZVRhYmxlXylcbiAgICAgICAgICAgICAgICAgICAgICAgIC52YWx1ZXMocm93cylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5leGVjKCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSovXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogQnVpbGRzIHRoZSBkYXRhYmFzZSBzY2hlbWEuXG4gICAgICAgICAqIEByZXR1cm4geyFsZi5zY2hlbWEuQnVpbGRlcn1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICogVE9ETzogdGhpcyBpcyB3aGVyZSB5b3Ugd291bGQgZGVmaW5lIHlvdXIgZGF0YWJhc2UgdGFibGVzXG4gICAgICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvbG92ZWZpZWxkL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlYy8wMV9zY2hlbWEubWRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGJ1aWxkU2NoZW1hKCkge1xuICAgICAgICAgICAgdmFyIHNjaGVtYUJ1aWxkZXIgPSBsZi5zY2hlbWEuY3JlYXRlKCdqc2RheS1ub3RhcycsIDEpO1xuICAgICAgICAgICAgc2NoZW1hQnVpbGRlclxuICAgICAgICAgICAgICAgIC5jcmVhdGVUYWJsZShUQUJMRS5Ob3RlKVxuICAgICAgICAgICAgICAgIC5hZGRDb2x1bW4oJ2lkJywgbGYuVHlwZS5JTlRFR0VSKVxuICAgICAgICAgICAgICAgIC5hZGRDb2x1bW4oJ3BhbGVzdHJhJywgbGYuVHlwZS5TVFJJTkcpXG4gICAgICAgICAgICAgICAgLmFkZENvbHVtbigndGV4dCcsIGxmLlR5cGUuU1RSSU5HKVxuICAgICAgICAgICAgICAgIC5hZGRQcmltYXJ5S2V5KFsnaWQnXSlcbiAgICAgICAgICAgICAgICAuYWRkSW5kZXgoJ2lkeF9wYWxlc3RyYScsIFsncGFsZXN0cmEnXSk7XG4gICAgICAgICAgICByZXR1cm4gc2NoZW1hQnVpbGRlcjtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbm5lY3RzIHRvIGFuZCBzZWVkcyB0aGUgZGF0YWJhc2Ugd2l0aCBzb21lIGR1bW15IGRhdGEgaWYgbm8gZGF0YSBleGlzdHMuXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBpbml0RGF0YWJhc2UoKSB7XG4gICAgICAgICAgICAkbG9nLmRlYnVnKCdBdHRlbXB0IHRvIGNvbm5lY3QgdG8gYW5kIHNlZWQgdGhlIGRhdGFiYXNlJyk7XG4gICAgICAgICAgICBjb25uZWN0KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdsb3ZlZmllbGQtc3RhcnRlci1ldmVudDpkYkNvbm5lY3RlZCcpO1xuICAgICAgICAgICAgICAgIGNoZWNrRm9yRXhpc3RpbmdEYXRhKCkudGhlbihcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGFFeGlzdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qaWYgKGRhdGFFeGlzdHMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0U2VlZERhdGEoKS50aGVuKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2xvdmVmaWVsZC1zdGFydGVyLWV2ZW50OnNlZWREYXRhSW5zZXJ0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9Ki9cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfVxufSkoKTtcbiIsIihmdW5jdGlvbigpe1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbiBTZXJ2acOnb2EgZGUgYWJzdHJhw6fDo28gZG8gRmlyZWJhc2VcbiAgICAgKiBAYXV0aG9yIFdhbHRlciBHYW5kYXJlbGxhIDx3YWx0ZXIud2dibkBnbWFpbC5jb20+XG4gICAgICogQG1lbWJlcm9mIGpzZGF5XG4gICAgICogQHZlcnNpb24gMS4wLjBcbiAgICAgKi9cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2pzZGF5JylcbiAgICAgICAgLmZhY3RvcnkoJ2ZpcmVTZXJ2aWNlJywgZmlyZVNlcnZpY2UpO1xuXG4gICAgZmlyZVNlcnZpY2UuJGluamVjdCA9IFsnJGZpcmViYXNlQXJyYXknLCAnJGZpcmViYXNlT2JqZWN0JywgJ1V0aWxzJywgJyRpb25pY0xvYWRpbmcnLCAnJGlvbmljUG9wdXAnXTtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBqc2RheVxuICAgICAqIEBuZ2RvYyBmYWN0b3J5XG4gICAgICogQG5hbWUgZmlyZVNlcnZpY2VcbiAgICAgKiBAcGFyYW0ge3Byb3ZpZGVyfSAkZmlyZWJhc2VBcnJheSBBYnN0cmHDp8OjbyBkbyBGaXJlYmFzZSBBcnJheVxuICAgICAqIEBwYXJhbSB7ZmFjdG9yeX0gVXRpbHMgQ29uanVudG8gZGUgZnVuw6fDtWVzIGRlIHV0aWxpZGFkZVxuICAgICAqIEBwYXJhbSB7cHJvdmlkZXJ9ICRpb25pY0xvYWRpbmcgUHJvdmlkZXIgcGFyYSBsb2FkZXIgZGlyZWN0aXZlXG4gICAgICogQHBhcmFtIHtwcm92aWRlcn0gJGlvbmljUG9wdXAgcHJvdmlkZXIgcGFyYSBwb3B1cCBkaXJlY3RpdmVcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiAgIE1hbmlwdWxhIG9zIGRhZG9zIGUgZmF6IG8gYWNlc3NvIMOhIGJhc2UgZG8gRmlyZWJhc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaXJlU2VydmljZSAoJGZpcmViYXNlQXJyYXksICRmaXJlYmFzZU9iamVjdCwgVXRpbHMsICRpb25pY0xvYWRpbmcsICRpb25pY1BvcHVwKSB7XG4gICAgICAgIC8vIEluaXRpYWxpemUgRmlyZWJhc2VcbiAgICAgICAgdmFyIGNvbmZpZyA9IHtcbiAgICAgICAgICAgIGFwaUtleTogXCJBSXphU3lCZFlOd1FvbGxLY3lGNmhRYUpDZnNWd0tBMF9HTWk5WWNcIixcbiAgICAgICAgICAgIGF1dGhEb21haW46IFwianNkYXktYXBwLmZpcmViYXNlYXBwLmNvbVwiLFxuICAgICAgICAgICAgZGF0YWJhc2VVUkw6IFwiaHR0cHM6Ly9qc2RheS1hcHAuZmlyZWJhc2Vpby5jb21cIixcbiAgICAgICAgICAgIHN0b3JhZ2VCdWNrZXQ6IFwianNkYXktYXBwLmFwcHNwb3QuY29tXCJcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGZiSW5pdCA9IGZpcmViYXNlLmluaXRpYWxpemVBcHAoY29uZmlnKTtcblxuICAgICAgICB2YXIgZGIgPSBmaXJlYmFzZS5kYXRhYmFzZSgpLnJlZigpO1xuICAgICAgICB2YXIgdHJpbGhhcyA9ICRmaXJlYmFzZUFycmF5KGRiLmNoaWxkKCd0cmlsaGFzJykub3JkZXJCeUNoaWxkKCd0aW1lc3RhbXAnKSk7XG4gICAgICAgIHZhciBzeW5jID0gJGZpcmViYXNlQXJyYXkoZGIuY2hpbGQoJ3BhbGVzdHJhcycpLm9yZGVyQnlDaGlsZCgnaG9yYScpKTtcbiAgICAgICAgdmFyIHdvcmtzaG9wcyA9ICRmaXJlYmFzZUFycmF5KGRiLmNoaWxkKCd3b3Jrc2hvcHMnKSk7XG4gICAgICAgIHZhciBhcHBDb25maWcgPSAkZmlyZWJhc2VPYmplY3QoZGIuY2hpbGQoJ2FwcENvbmZpZycpKTtcblxuICAgICAgICB2YXIgX3JldHVybiA9IHtcbiAgICAgICAgICAgIGdldEFwcENvbmZpZzogICBfZ2V0QXBwQ29uZmlnLFxuICAgICAgICAgICAgZ2V0VHJpbGhhczogICAgIF9nZXRUcmlsaGFzLFxuICAgICAgICAgICAgZ2V0VHJpbGhhIDogICAgIF9nZXRUcmlsaGEsXG4gICAgICAgICAgICBnZXRQYWxlc3RyYXM6ICAgX2dldFBhbGVzdHJhcyxcbiAgICAgICAgICAgIGdldFBhbGVzdHJhOiAgICBfZ2V0UGFsZXN0cmEsXG4gICAgICAgICAgICBnZXRDb21lbnRhcmlvczogX2dldENvbWVudGFyaW9zLFxuICAgICAgICAgICAgZ2V0V29ya3Nob3BzOiAgIF9nZXRXb3Jrc2hvcHMsXG4gICAgICAgICAgICBhZGRQYWxlc3RyYTogICAgX2FkZFBhbGVzdHJhLFxuICAgICAgICAgICAgYWRkQ29tZW50YXJpbzogIF9hZGRDb21lbnRhcmlvLFxuICAgICAgICAgICAgdXBkYXRlUGFsZXN0cmE6IF91cGRhdGVQYWxlc3RyYVxuICAgICAgICB9O1xuXG4gICAgICAgIF9sb2FkaW5nKCk7XG5cbiAgICAgICAgcmV0dXJuIF9yZXR1cm47XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldG9ybmEgbyBvYmpldG8gZGUgY29uZmlndXJhw6fDo29cbiAgICAgICAgICogQG1lbWJlcm9mIGZpcmVTZXJ2aWNlXG4gICAgICAgICAqIEBmdW5jdGlvbiBfZ2V0QXBwQ29uZmlnXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBfZ2V0QXBwQ29uZmlnICgpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBDb25maWc7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogRXNjdXRhIG8gY2FycmVnYW1lbnRvIGluaWNpYWwgZG8gYXJyYXkgdmluZG8gZG8gRmlyZWJhc2UgZXhpYmluZG8gdW0gaW9uaWNMb2FkZXJcbiAgICAgICAgICogQG1lbWJlcm9mIGZpcmVTZXJ2aWNlXG4gICAgICAgICAqIEBmdW5jdGlvbiBfbG9hZGluZ1xuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gX2xvYWRpbmcgKCkge1xuICAgICAgICAgICAgJGlvbmljTG9hZGluZy5zaG93KHt0ZW1wbGF0ZTogJ0NhcnJlZ2FuZG8uLi4nfSk7XG4gICAgICAgICAgICBzeW5jLiRsb2FkZWQoZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgICAgICAgICAgJGlvbmljTG9hZGluZy5oaWRlKCk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJybykge1xuICAgICAgICAgICAgICAgICRpb25pY0xvYWRpbmcuaGlkZSgpO1xuICAgICAgICAgICAgICAgICRpb25pY1BvcHVwLmFsZXJ0KHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdPcHMhJyxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IHN0eWxlPVwidGV4dC1hbGlnbjogY2VudGVyO1wiPk7Do28gZm9pIHBvc3PDrXZlbCBjYXJyZWdhciBvcyBkYWRvcy48YnI+VmVyaWZpcXVlIHN1YSBjb25leMOjby48L2Rpdj4nLFxuICAgICAgICAgICAgICAgICAgICBva1R5cGU6ICdidXR0b24tZW5lcmdpemVkJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0b3JuYSBhIGxpc3RhIGRlIHBhbGVzdHJhcyB2aW5kYSBkbyBmaXJlYmFzZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmlyZVNlcnZpY2VcbiAgICAgICAgICogQGZ1bmN0aW9uIF9nZXRQYWxlc3RyYXNcbiAgICAgICAgICogQHJldHVybnMge0FycmF5fSAgICAgICAgIExpc3RhIGRlIHBhbGVzdHJhc1xuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gX2dldFBhbGVzdHJhcyAoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3luYztcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXRvcm5hIGEgbGlzdGEgZGUgdHJpbGhhcyB2aW5kYSBkbyBmaXJlYmFzZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmlyZVNlcnZpY2VcbiAgICAgICAgICogQGZ1bmN0aW9uIF9nZXRUcmlsaGFzXG4gICAgICAgICAqIEByZXR1cm5zIHtBcnJheX0gICAgICAgICBMaXN0YSBkZSBwYWxlc3RyYXNcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRUcmlsaGFzICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0cmlsaGFzO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldG9ybmEgdW1hIHRyaWxoYSBwYXNzYW5kby1zZSBvICRpZFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmlyZVNlcnZpY2VcbiAgICAgICAgICogQGZ1bmN0aW9uIF9nZXRUcmlsaGFcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IF9pZFxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gX2dldFRyaWxoYSAoX2lkKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gZmFsc2U7XG5cbiAgICAgICAgICAgIHRyaWxoYXMuZm9yRWFjaChmdW5jdGlvbiAoX3QpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3QuJGlkID09IF9pZClcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gX3Q7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXRvcm5hIHVtYSBwYWxlc3RyYSBkYSBsaXN0YVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmlyZVNlcnZpY2VcbiAgICAgICAgICogQGZ1bmN0aW9uIF9nZXRQYWxlc3RyYVxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gX2tleSAgICAgQSBrZXkgZGEgcGFsZXN0cmEgbm8gYXJyYXlcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH0gICAgICAgIEEgcGFsZXN0cmEgZW5jb250cmFkYVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gX2dldFBhbGVzdHJhIChfa2V5KSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gbnVsbDtcblxuICAgICAgICAgICAgc3luYy5mb3JFYWNoKGZ1bmN0aW9uIChfdmFsKSB7XG4gICAgICAgICAgICAgICAgaWYgKF92YWwuJGlkID09IF9rZXkpXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IF92YWw7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGljaW9uYSB1bSBvYmpldG8gcGFsZXN0cmEgw6AgbGlzdGFcbiAgICAgICAgICogQG1lbWJlcm9mIGZpcmVTZXJ2aWNlXG4gICAgICAgICAqIEBmdW5jdGlvbiBfYWRkUGFsZXN0cmFcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IF9wYWxlc3RyYSAgICBPYmpldG8gcmVwcmVzZW50YW5kbyB1bWEgcGFsZXN0cmFcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIF9hZGRQYWxlc3RyYSAoX3BhbGVzdHJhKSB7XG4gICAgICAgICAgICBzeW5jLiRhZGQoX3BhbGVzdHJhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBdHVhbGl6YSB1bSBpdGVtIGRvIG9iamV0byBwYWxlc3RyYVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmlyZVNlcnZpY2VcbiAgICAgICAgICogQGZ1bmN0aW9uIF91cGRhdGVQYWxlc3RyYVxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gX3BhbGVzdHJhICAgIE9iamV0byByZXByZXNlbnRhbmRvIHVtYSBwYWxlc3RyYVxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gX2l0ZW0gICAgICAgIENoYXZlIGRvIGl0ZW0gYSBzZXIgYXR1YWxpemFkb1xuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gX3VwZGF0ZVBhbGVzdHJhIChfcGFsZXN0cmEsIF9pdGVtKSB7XG4gICAgICAgICAgICBkYi5jaGlsZCgncGFsZXN0cmFzJykuY2hpbGQoX3BhbGVzdHJhLiRpZCkuY2hpbGQoX2l0ZW0pLnNldChfcGFsZXN0cmFbX2l0ZW1dKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGljaW9uYSB1bSBjb21lbnTDoXJpbyDDoCBwYWxlc3RyYVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmlyZVNlcnZpY2VcbiAgICAgICAgICogQGZ1bmN0aW9uIF9hZGRDb21lbnRhcmlvXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBfcGFsZXN0cmEgICAgQSBwYWxlc3RyYSBhIHNlciBhZGljaW9uYWRhIG8gY29tZW50w6FyaW9cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IF9jb21lbnRhcmlvICBPIGNvbWVudMOhcmlvXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBfYWRkQ29tZW50YXJpbyAoX3BhbGVzdHJhLCBfY29tZW50YXJpbykge1xuICAgICAgICAgICAgdmFyIF9kdCA9IG5ldyBEYXRlKCk7XG5cbiAgICAgICAgICAgIF9jb21lbnRhcmlvLnJlZ2lzdHJvID0gX2R0LmdldFRpbWUoKTtcbiAgICAgICAgICAgIF9wYWxlc3RyYS5jb21lbnRhcmlvcyA9IF9wYWxlc3RyYS5jb21lbnRhcmlvcyB8fCB7fTtcbiAgICAgICAgICAgIF9wYWxlc3RyYS5jb21lbnRhcmlvc1tfZHQuZ2V0VGltZSgpLnRvU3RyaW5nKCldID0gX2NvbWVudGFyaW87XG5cbiAgICAgICAgICAgIGRiLmNoaWxkKCdwYWxlc3RyYXMnKS5jaGlsZChfcGFsZXN0cmEuJGlkKS5jaGlsZChcImNvbWVudGFyaW9zXCIpLmNoaWxkKF9kdC5nZXRUaW1lKCkudG9TdHJpbmcoKSkuc2V0KF9jb21lbnRhcmlvKTtcbiAgICAgICAgICAgIHJldHVybiBfZ2V0Q29tZW50YXJpb3MoX3BhbGVzdHJhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMaXN0YSBvcyBjb21lbnRhcmlvcyBkZSB1bWEgcGFsZXN0cmFcbiAgICAgICAgICogQG1lbWJlcm9mIGZpcmVTZXJ2aWNlXG4gICAgICAgICAqIEBmdW5jdGlvbiBfZ2V0Q29tZW50YXJpb3NcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHBhbGVzdHJhXG4gICAgICAgICAqIEByZXR1cm5zIHtBcnJheX0gTGlzdGEgZGUgY29tZW50YXJpb3NcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRDb21lbnRhcmlvcyAoX3BhbGVzdHJhKSB7XG4gICAgICAgICAgICBpZiAoIV9wYWxlc3RyYS5jb21lbnRhcmlvcylcbiAgICAgICAgICAgICAgICByZXR1cm4ge307XG5cbiAgICAgICAgICAgIHZhciByZXMgPSBbXTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKF9wYWxlc3RyYS5jb21lbnRhcmlvcykuZm9yRWFjaChmdW5jdGlvbihfa2V5KXtcbiAgICAgICAgICAgICAgICByZXMucHVzaChfcGFsZXN0cmEuY29tZW50YXJpb3NbX2tleV0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERldm9sdmUgYSBsaXN0YSBjb20gb3Mgd29ya3Nob3BzXG4gICAgICAgICAqIEBtZW1iZXJvZiBmaXJlU2VydmljZVxuICAgICAgICAgKiBAZnVuY3Rpb24gX2dldFdvcmtzaG9wc1xuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gX2dldFdvcmtzaG9wcyAoKSB7XG4gICAgICAgICAgICByZXR1cm4gd29ya3Nob3BzO1xuICAgICAgICB9XG4gICAgfVxufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdqc2RheScpXG4gICAgICAgIC5mYWN0b3J5KCdub3RlU2VydmljZScsIG5vdGVTZXJ2aWNlKTtcblxuICAgIG5vdGVTZXJ2aWNlLiRpbmplY3QgPSBbJyRsb2cnLCAnJHEnLCAnZGJTZXJ2aWNlJ107XG5cbiAgICBmdW5jdGlvbiBub3RlU2VydmljZSgkbG9nLCAkcSwgZGJTZXJ2aWNlKSB7XG5cbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICAgICAgICBhZGQ6IGFkZCxcbiAgICAgICAgICAgIGVkaXQ6IGVkaXQsXG4gICAgICAgICAgICBnZXRBbGw6IGdldEFsbCxcbiAgICAgICAgICAgIGdldEJ5SWQ6IGdldEJ5SWQsXG4gICAgICAgICAgICBnZXRCeVBhbGVzdHJhOiBnZXRCeVBhbGVzdHJhLFxuICAgICAgICAgICAgcmVtb3ZlOiByZW1vdmVcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gc2VydmljZTtcblxuICAgICAgICAvLy8vLy8vLy8vLy9cblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGRzIGEgbmV3IG5vdGUgdG8gdGhlIGRiLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gLSB0aGUgdGV4dCBvZiB0aGUgbm90ZSB0byB1cGRhdGVcbiAgICAgICAgICogQHJldHVybiB7IWFuZ3VsYXIuJHEuUHJvbWlzZX1cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGFkZChwYWxlc3RyYSwgdGV4dCkge1xuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgZGJTZXJ2aWNlLmNvbm5lY3QoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2hvamUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgIHZhciByb3cgPSBkYlNlcnZpY2Uubm90ZVRhYmxlXy5jcmVhdGVSb3coe1xuICAgICAgICAgICAgICAgICAgICAnaWQnOiBfaG9qZS5nZXRUaW1lKCksXG4gICAgICAgICAgICAgICAgICAgICdwYWxlc3RyYSc6IHBhbGVzdHJhLFxuICAgICAgICAgICAgICAgICAgICAndGV4dCc6IHRleHRcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIEluc2VydCBkb2NzOiBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2xvdmVmaWVsZC9ibG9iL21hc3Rlci9kb2NzL3NwZWMvMDRfcXVlcnkubWQjNDItaW5zZXJ0LXF1ZXJ5LWJ1aWxkZXJcbiAgICAgICAgICAgICAgICBkYlNlcnZpY2UuZGJfLmluc2VydE9yUmVwbGFjZSgpXG4gICAgICAgICAgICAgICAgICAgIC5pbnRvKGRiU2VydmljZS5ub3RlVGFibGVfKVxuICAgICAgICAgICAgICAgICAgICAudmFsdWVzKFtyb3ddKVxuICAgICAgICAgICAgICAgICAgICAuZXhlYygpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9XG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlcyBhIG5vdGUgaW4gdGhlIGRiLlxuICAgICAgICAgKiBAcGFyYW0ge2d1aWR9IC0gdGhlIGlkIG9mIHRoZSBub3RlIHRvIHVwZGF0ZVxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gLSB0aGUgdGV4dCBvZiB0aGUgbm90ZSB0byB1cGRhdGVcbiAgICAgICAgICogQHJldHVybiB7IWFuZ3VsYXIuJHEuUHJvbWlzZX1cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGVkaXQoaWQsIHRleHQpIHtcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgIGRiU2VydmljZS5jb25uZWN0KCkudGhlbihmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgZG9jczogaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9sb3ZlZmllbGQvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjLzA0X3F1ZXJ5Lm1kIzQzLXVwZGF0ZS1xdWVyeS1idWlsZGVyXG4gICAgICAgICAgICAgICAgZGJTZXJ2aWNlLmRiXy51cGRhdGUoZGJTZXJ2aWNlLm5vdGVUYWJsZV8pXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoZGJTZXJ2aWNlLm5vdGVUYWJsZV8udGV4dCwgdGV4dClcbiAgICAgICAgICAgICAgICAgICAgLndoZXJlKGRiU2VydmljZS5ub3RlVGFibGVfLmlkLmVxKGlkKSlcbiAgICAgICAgICAgICAgICAgICAgLmV4ZWMoKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgYWxsIG5vdGVzIGZyb20gdGhlICBkYi5cbiAgICAgICAgICogQHJldHVybiB7IWFuZ3VsYXIuJHEuUHJvbWlzZS48IUFycmF5PCFPYmplY3Q+Pn1cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGdldEFsbCgpIHtcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgIGRiU2VydmljZS5jb25uZWN0KCkudGhlbihmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBPYnNlcnZlIHRoZSBzZWxlY3QgcXVlcnkgdG8gc2F2ZSBoYXZpbmcgdG8gZXhwbGljaXRseSBjYWxsIGdldE5vdGVzKCkgYWZ0ZXIgYW4gSU5TRVJUL1VQREFURSBvciBERUxFVEUgZG9jczogaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9sb3ZlZmllbGQvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjLzA0X3F1ZXJ5Lm1kIzQ2LW9ic2VydmVyc1xuICAgICAgICAgICAgICAgIC8vIGRiLm9ic2VydmUoc2VsZWN0UXVlcnksIGhhbmRsZXIpO1xuXG4gICAgICAgICAgICAgICAgLy8gU0VMRUNUIGRvY3M6IGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvbG92ZWZpZWxkL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlYy8wNF9xdWVyeS5tZCM0MTgtcmV0cmlldmFsLW9mLXF1ZXJ5LXJlc3VsdHNcbiAgICAgICAgICAgICAgICBkYlNlcnZpY2UuZGJfLnNlbGVjdCgpXG4gICAgICAgICAgICAgICAgICAgIC5mcm9tKGRiU2VydmljZS5ub3RlVGFibGVfKVxuICAgICAgICAgICAgICAgICAgICAuZXhlYygpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHJvd3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJvd3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkOiAnLCByZWFzb24pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9XG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyBhIHNpbmdsZSBub3RlIGZyb20gdGhlIGRiLlxuICAgICAgICAgKiBAcGFyYW0ge2d1aWR9IC0gdGhlIGlkIG9mIHRoZSBub3RlIHRvIHJldHJpZXZlXG4gICAgICAgICAqIEByZXR1cm4geyFhbmd1bGFyLiRxLlByb21pc2UuPCFPYmplY3Q+fVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gZ2V0QnlJZChpZCkge1xuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgZGJTZXJ2aWNlLmNvbm5lY3QoKS50aGVuKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIGRiU2VydmljZS5kYl8uc2VsZWN0KClcbiAgICAgICAgICAgICAgICAgICAgLmZyb20oZGJTZXJ2aWNlLm5vdGVUYWJsZV8pXG4gICAgICAgICAgICAgICAgICAgIC53aGVyZShkYlNlcnZpY2Uubm90ZVRhYmxlXy5pZC5lcShpZCkpXG4gICAgICAgICAgICAgICAgICAgIC5leGVjKClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAocmVzdWx0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChyZXN1bHRzKSAmJiByZXN1bHRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdHNbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsb2cuZXJyb3IoJ05vdGUgbm90IGZvdW5kIHdpdGggaWQgb2Y6ICcgKyBpZCwgcmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0QnlQYWxlc3RyYShwYWxlc3RyYSkge1xuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgZGJTZXJ2aWNlLmNvbm5lY3QoKS50aGVuKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIGRiU2VydmljZS5kYl8uc2VsZWN0KClcbiAgICAgICAgICAgICAgICAgICAgLmZyb20oZGJTZXJ2aWNlLm5vdGVUYWJsZV8pXG4gICAgICAgICAgICAgICAgICAgIC53aGVyZShkYlNlcnZpY2Uubm90ZVRhYmxlXy5wYWxlc3RyYS5lcShwYWxlc3RyYSkpXG4gICAgICAgICAgICAgICAgICAgIC5leGVjKClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAocmVzdWx0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlbGV0ZXMgYSBub3RlIGZyb20gdGhlIGRiLlxuICAgICAgICAgKiBAcGFyYW0ge2d1aWR9IC0gdGhlIGlkIG9mIHRoZSBub3RlIHRvIHJldHJpZXZlXG4gICAgICAgICAqIEByZXR1cm4geyFhbmd1bGFyLiRxLlByb21pc2V9IC0gcHJvbWlzZSB0aGF0IGlzIHJlc29sdmVkIG9uY2UgdGhlIHJvdyBoYXMgYmVlbiBkZWxldGVkXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiByZW1vdmUoaWQpIHtcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgIGRiU2VydmljZS5jb25uZWN0KCkudGhlbihmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBERUxFVEUgZG9jczogaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9sb3ZlZmllbGQvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjLzA0X3F1ZXJ5Lm1kIzQ0LWRlbGV0ZS1xdWVyeS1idWlsZGVyXG4gICAgICAgICAgICAgICAgZGJTZXJ2aWNlLmRiXy5kZWxldGUoKVxuICAgICAgICAgICAgICAgICAgICAuZnJvbShkYlNlcnZpY2Uubm90ZVRhYmxlXylcbiAgICAgICAgICAgICAgICAgICAgLndoZXJlKGRiU2VydmljZS5ub3RlVGFibGVfLmlkLmVxKGlkKSlcbiAgICAgICAgICAgICAgICAgICAgLmV4ZWMoKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBndWlkLlxuICAgICAgICAgKiBAcmV0dXJuIHtndWlkfVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKiBjb3B5L3Bhc3RlZCBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzEwNTA3NC8yNjUyOTEwIC0gdGhhbmsgeW91XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBndWlkKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gczQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoKDEgKyBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDApXG4gICAgICAgICAgICAgICAgICAgIC50b1N0cmluZygxNilcbiAgICAgICAgICAgICAgICAgICAgLnN1YnN0cmluZygxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHM0KCkgKyBzNCgpICsgJy0nICsgczQoKSArICctJyArIHM0KCkgKyAnLScgKyBzNCgpICsgJy0nICsgczQoKSArIHM0KCkgKyBzNCgpO1xuICAgICAgICB9XG5cbiAgICB9XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCl7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIEJpYmxpb3RlY2EgZGUgZnVuw6fDtWVzIHV0aWxpdMOhcmlhc1xuICAgICAqIEBhdXRob3IgV2FsdGVyIEdhbmRhcmVsbGEgPHdhbHRlci53Z2JuQGdtYWlsLmNvbT5cbiAgICAgKiBAbWVtYmVyb2YganNkYXlcbiAgICAgKiBAdmVyc2lvbiAxLjAuMFxuICAgICAqL1xuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnanNkYXknKVxuICAgICAgICAuZmFjdG9yeSgnVXRpbHMnLCBVdGlscyk7XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YganNkYXlcbiAgICAgKiBAbmdkb2MgZmFjdG9yeVxuICAgICAqIEBuYW1lIFV0aWxzXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogICBQcm92w6ogZnVuw6fDtWVzIHV0aWxpdMOhcmlhcyBwYXJhIHVzbyBkYSBhcGxpY2HDp8Ojb1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIFV0aWxzICgpIHtcbiAgICAgICAgdmFyIF9yZXR1cm4gPSB7XG4gICAgICAgICAgICBwYXJzZVN0clRvRGF0ZTogICAgICAgICBfcGFyc2VTdHJUb0RhdGUsXG4gICAgICAgICAgICBwYXJzZURhdGVUb1N0cjogICAgICAgICBfcGFyc2VEYXRlVG9TdHIsXG4gICAgICAgICAgICBwYXJzZVRpbWVUb1N0cjogICAgICAgICBfcGFyc2VUaW1lVG9TdHIsXG4gICAgICAgICAgICBwYXJzZVNob3J0RGF0ZVRvU3RyOiAgICBfcGFyc2VTaG9ydERhdGVUb1N0cixcbiAgICAgICAgICAgIHNldExvY2FsU3RvcmFnZTogICAgICAgIF9zZXRMb2NhbFN0b3JhZ2UsXG4gICAgICAgICAgICBnZXRMb2NhbFN0b3JhZ2U6ICAgICAgICBfZ2V0TG9jYWxTdG9yYWdlXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIF9yZXR1cm47XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRyYW5zZm9ybWEgdW1hIHN0cmluZyBmb3JtYXRhZGEgY29tbyBkZC9tbS95eXl5IHBhcmEgdW0gb2JqZXRvIERhdGVcbiAgICAgICAgICogQG1lbWJlcm9mIFV0aWxzXG4gICAgICAgICAqIEBmdW5jdGlvbiBfcGFyc2VTdHJUb0RhdGVcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IF9kYXRlICAgICAgICBEYXRhIG5vIGZvcm1hdG8gZGQvbW0veXl5eVxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IF90aW1lICAgICAgIEJvb2xlYW5vIHNlIGRldmUgc2VyIGNvbnNpZGVyYWRvIGEgaG9yYVxuICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSAgICAgICAgICAgIFRpbWVzdGFtcCBkYSBkYXRhXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBfcGFyc2VTdHJUb0RhdGUgKF9kYXRlLCBfdGltZSkge1xuICAgICAgICAgICAgX3RpbWUgPSBfdGltZSB8fCBmYWxzZTtcbiAgICAgICAgICAgIHZhciBfZGF0ZSA9IF9kYXRlLnNwbGl0KCcgJyk7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IERhdGUoXG4gICAgICAgICAgICAgICAgX2RhdGVbMF0uc3BsaXQoJy8nKVsyXSxcbiAgICAgICAgICAgICAgICBwYXJzZUludChfZGF0ZVswXS5zcGxpdCgnLycpWzFdKSAtIDEsXG4gICAgICAgICAgICAgICAgX2RhdGVbMF0uc3BsaXQoJy8nKVswXSxcbiAgICAgICAgICAgICAgICBfdGltZSA/IF9kYXRlWzFdLnNwbGl0KCc6JylbMF0gOiAwLFxuICAgICAgICAgICAgICAgIF90aW1lID8gX2RhdGVbMV0uc3BsaXQoJzonKVsxXSA6IDAsXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5nZXRUaW1lKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogVHJhbnNmb3JtYSB1bSB0aW1lc3RhbXAgcGFyYSBkYXRhIG5vIGZvcm1hdG8gZGQvbW0veXl5eSBbaGg6bW1dXG4gICAgICAgICAqIEBtZW1iZXJvZiBVdGlsc1xuICAgICAgICAgKiBAZnVuY3Rpb24gX3BhcnNlRGF0ZVRvU3RyXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBfZGF0ZSAgICAgICAgVGltZXN0YW1wIGRhIGRhdGFcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBfdGltZSAgICAgICBCb29sZWFubyBzZSBkZXZlIHNlciBjb25zaWRlcmFkbyBhIGhvcmFcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ30gICAgICAgICAgICBBIGRhdGEgbm8gZm9ybWF0byBkZC9tbS95eXl5IFtoaDptbV1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIF9wYXJzZURhdGVUb1N0ciAoX2RhdGUsIF90aW1lKXtcbiAgICAgICAgICAgIF90aW1lID0gX3RpbWUgfHwgZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gbW9tZW50KF9kYXRlKS5mb3JtYXQoX3RpbWUgPyAnREQvTU0vWVlZWSBISDptbScgOiAnREQvTU0vWVlZWScpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRyYW5zZm9ybWEgdW0gdGltZXN0YW1wIGVtIGhvcmEgbm8gZm9ybWF0byBoaDptbVxuICAgICAgICAgKiBAbWVtYmVyb2YgVXRpbHNcbiAgICAgICAgICogQGZ1bmN0aW9uIF9wYXJzZVRpbWVUb1N0clxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gX2RhdGUgICAgICAgIFRpbWVzdGFtcCBkYSBkYXRhXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICAgICAgICAgICAgQSBob3JhIG5vIGZvcm1hdG8gaGg6bW1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIF9wYXJzZVRpbWVUb1N0ciAoX2RhdGUpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBuZXcgRGF0ZShfZGF0ZSk7XG4gICAgICAgICAgICByZXR1cm4gbW9tZW50KF9kYXRlKS5mb3JtYXQoJ0hIOm1tJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogVHJhbnNmb3JtYSB1bSB0aW1lc3RhbXAgbnVtYSBkYXRhIGN1cnRhIG5vIGZvcm1hdG8gZGQvbW1cbiAgICAgICAgICogQG1lbWJlcm9mIFV0aWxzXG4gICAgICAgICAqIEBmdW5jdGlvbiBfcGFyc2VTaG9ydERhdGVUb1N0clxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gX2RhdGUgICAgICAgIFRpbWVzdGFtcCBkYSBkYXRhXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICAgICAgICAgICAgQSBkYXRhIG5vIGZvcm1hdG8gZGQvbW1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIF9wYXJzZVNob3J0RGF0ZVRvU3RyIChfZGF0ZSl7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IERhdGUoX2RhdGUpO1xuICAgICAgICAgICAgcmV0dXJuIG1vbWVudChfZGF0ZSkuZm9ybWF0KCdERC9NTScpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNhbHZhIHVtIGl0ZW0gbm8gbG9jYWxTdG9yYWdlIGRvIGRpc3Bvc2l0aXZvXG4gICAgICAgICAqIEBtZW1iZXJvZiBVdGlsc1xuICAgICAgICAgKiBAZnVuY3Rpb24gX3NldExvY2FsU3RvcmFnZVxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gX2l0ZW0gICAgIENoYXZlIGRlIGlkZW50aWZpY2HDp8OjbyBkbyBpdGVtIG5vIGxvY2FsU3RvcmFnZVxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gX3ZhbG9yICAgIFZhbG9yIGRvIGl0ZW1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIF9zZXRMb2NhbFN0b3JhZ2UgKF9pdGVtLCBfdmFsb3IpIHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKF9pdGVtLCBKU09OLnN0cmluZ2lmeShfdmFsb3IpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNnYXRhIHVtIGl0ZW0gc2Fsdm8gbm8gbG9jYWxTdG9yYWdlXG4gICAgICAgICAqIEBtZW1iZXJvZiBVdGlsc1xuICAgICAgICAgKiBAZnVuY3Rpb24gX2dldExvY2FsU3RvcmFnZVxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gX2l0ZW0gICAgIENoYXZlIGRlIGlkZW50aWZpY2HDp8OjbyBkbyBpdGVtIG5vIGxvY2FsU3RvcmFnZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSAgICAgICAgIEl0ZW0gZG8gbG9jYWxTdG9yYWdlXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBfZ2V0TG9jYWxTdG9yYWdlIChfaXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oX2l0ZW0pKTtcbiAgICAgICAgfVxuICAgIH1cbn0pKCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

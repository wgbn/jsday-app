!function(){"use strict";function t(){var t={restrict:"E",templateUrl:"templates/jsday-app-bar.html",scope:{back:"=",acao:"&"},controller:e};return t}function e(t){function e(){t.acao()}t.back=t.back||!1,t.voltarClick=e}angular.module("jsday").directive("jsdayAppBar",t),e.$inject=["$scope"]}(),function(){"use strict";function t(){var t={restrict:"E",templateUrl:"templates/jsday-nova-nota.html",scope:{palestra:"="},controller:e};return t}function e(t,e,a){function o(){a.add(t.palestra,t.texto).then(function(){e.$broadcast("notaAdded",{palestra:t.palestra}),t.texto=""})}t.texto="",t.salvarClick=o}angular.module("jsday").directive("jsdayNovaNota",t),e.$inject=["$scope","$rootScope","noteService"]}(),function(){"use strict";function t(){var t={restrict:"E",templateUrl:"templates/jsday-palestras.html",scope:{palestra:"="},controller:e};return t}function e(t,e,a){function o(){t.palestra.servico||e.go("palestra",{key:t.palestra.$id})}t.palestra.hora=a.parseTimeToStr(t.palestra.hora),t.palestraClick=o}angular.module("jsday").directive("jsdayPalestras",t),e.$inject=["$scope","$state","Utils"]}(),function(){"use strict";function t(){function t(t,e,a,o){var n=$(window).height()-49-140-("nota"==t.conteudo?66:0);$(".jsday-sem-conteudo").height(n)}var a={restrict:"E",templateUrl:"templates/jsday-sem-conteudo.html",scope:{conteudo:"="},link:t,controller:e};return a}function e(t){"nota"==t.conteudo?(t.legenda="Nenhuma nota adicionada",t.icone="img/notas.png"):(t.legenda="Ningu√©m comentou ainda",t.icone="img/chat.png")}angular.module("jsday").directive("jsdaySemConteudo",t),e.$inject=["$scope"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzZGF5QXBwQmFyLmpzIiwianNkYXlOb3ZhTm90YS5qcyIsImpzZGF5UGFsZXN0cmFzLmpzIiwianNkYXlTZW1Db250ZXVkby5qcyJdLCJuYW1lcyI6WyJqc2RheUFwcEJhciIsImRpcmVjdGl2ZSIsInJlc3RyaWN0IiwidGVtcGxhdGVVcmwiLCJzY29wZSIsImJhY2siLCJhY2FvIiwiY29udHJvbGxlciIsImFwcEJhckN0cmwiLCIkc2NvcGUiLCJfdm9sdGFyQ2xpY2siLCJ2b2x0YXJDbGljayIsImFuZ3VsYXIiLCJtb2R1bGUiLCIkaW5qZWN0IiwianNkYXlOb3ZhTm90YSIsInBhbGVzdHJhIiwiY3RybE5vdmFOb3RhIiwiJHJvb3RTY29wZSIsIm5vdGVTZXJ2aWNlIiwiX3NhbHZhckNsaWNrIiwiYWRkIiwidGV4dG8iLCJ0aGVuIiwiJGJyb2FkY2FzdCIsInNhbHZhckNsaWNrIiwianNkYXlQYWxlc3RyYXMiLCJjdHJsUGFsZXN0cmFzIiwiJHN0YXRlIiwiVXRpbHMiLCJfcGFsZXN0cmFDbGljayIsInNlcnZpY28iLCJnbyIsImtleSIsIiRpZCIsImhvcmEiLCJwYXJzZVRpbWVUb1N0ciIsInBhbGVzdHJhQ2xpY2siLCJqc2RheVNlbUNvbnRldWRvIiwibGlua1NlbUNvbnRldWRvIiwiZWwiLCJhdHRyIiwidm0iLCJhbHR1cmEiLCIkIiwid2luZG93IiwiaGVpZ2h0IiwiY29udGV1ZG8iLCJsaW5rIiwiY3RybFNlbUNvbnRldWRvIiwibGVnZW5kYSIsImljb25lIl0sIm1hcHBpbmdzIjoiQ0FBQSxXQUNBLFlBOEJBLFNBQUFBLEtBQ0EsR0FBQUMsSUFDQUMsU0FBQSxJQUNBQyxZQUFBLCtCQUNBQyxPQUNBQyxLQUFBLElBQ0FDLEtBQUEsS0FFQUMsV0FBQUMsRUFHQSxPQUFBUCxHQVVBLFFBQUFPLEdBQUFDLEdBU0EsUUFBQUMsS0FDQUQsRUFBQUgsT0FUQUcsRUFBQUosS0FBQUksRUFBQUosT0FBQSxFQUNBSSxFQUFBRSxZQUFBRCxFQTdDQUUsUUFDQUMsT0FBQSxTQUNBWixVQUFBLGNBQUFELEdBa0NBUSxFQUFBTSxTQUFBLGFDN0NBLFdBQ0EsWUEyQkEsU0FBQUMsS0FDQSxHQUFBZCxJQUNBQyxTQUFBLElBQ0FDLFlBQUEsaUNBQ0FDLE9BQ0FZLFNBQUEsS0FFQVQsV0FBQVUsRUFHQSxPQUFBaEIsR0FVQSxRQUFBZ0IsR0FBQVIsRUFBQVMsRUFBQUMsR0FXQSxRQUFBQyxLQUNBRCxFQUFBRSxJQUFBWixFQUFBTyxTQUFBUCxFQUFBYSxPQUNBQyxLQUFBLFdBQ0FMLEVBQUFNLFdBQUEsYUFBQVIsU0FBQVAsRUFBQU8sV0FDQVAsRUFBQWEsTUFBQSxLQWRBYixFQUFBYSxNQUFBLEdBQ0FiLEVBQUFnQixZQUFBTCxFQXpDQVIsUUFDQUMsT0FBQSxTQUNBWixVQUFBLGdCQUFBYyxHQThCQUUsRUFBQUgsU0FBQSxTQUFBLGFBQUEsa0JDekNBLFdBQ0EsWUEyQkEsU0FBQVksS0FDQSxHQUFBekIsSUFDQUMsU0FBQSxJQUNBQyxZQUFBLGlDQUNBQyxPQUNBWSxTQUFBLEtBRUFULFdBQUFvQixFQUdBLE9BQUExQixHQVVBLFFBQUEwQixHQUFBbEIsRUFBQW1CLEVBQUFDLEdBV0EsUUFBQUMsS0FDQXJCLEVBQUFPLFNBQUFlLFNBQ0FILEVBQUFJLEdBQUEsWUFBQUMsSUFBQXhCLEVBQUFPLFNBQUFrQixNQVpBekIsRUFBQU8sU0FBQW1CLEtBQUFOLEVBQUFPLGVBQUEzQixFQUFBTyxTQUFBbUIsTUFDQTFCLEVBQUE0QixjQUFBUCxFQXpDQWxCLFFBQ0FDLE9BQUEsU0FDQVosVUFBQSxpQkFBQXlCLEdBOEJBQyxFQUFBYixTQUFBLFNBQUEsU0FBQSxZQ3pDQSxXQUNBLFlBNkJBLFNBQUF3QixLQXFCQSxRQUFBQyxHQUFBbkMsRUFBQW9DLEVBQUFDLEVBQUFDLEdBQ0EsR0FBQUMsR0FBQUMsRUFBQUMsUUFBQUMsU0FBQSxHQUFBLEtBQUEsUUFBQTFDLEVBQUEyQyxTQUFBLEdBQUEsRUFDQUgsR0FBQSx1QkFBQUUsT0FBQUgsR0F0QkEsR0FBQTFDLElBQ0FDLFNBQUEsSUFDQUMsWUFBQSxvQ0FDQUMsT0FDQTJDLFNBQUEsS0FFQUMsS0FBQVQsRUFDQWhDLFdBQUEwQyxFQUdBLE9BQUFoRCxHQXVCQSxRQUFBZ0QsR0FBQXhDLEdBQ0EsUUFBQUEsRUFBQXNDLFVBQ0F0QyxFQUFBeUMsUUFBQSwwQkFDQXpDLEVBQUEwQyxNQUFBLGtCQUVBMUMsRUFBQXlDLFFBQUEseUJBQ0F6QyxFQUFBMEMsTUFBQSxnQkE3REF2QyxRQUNBQyxPQUFBLFNBQ0FaLFVBQUEsbUJBQUFxQyxHQThDQVcsRUFBQW5DLFNBQUEiLCJmaWxlIjoiZGlyZWN0aXZlcy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbiBEaXJlY3RpdmEgcGFyYSBhIGJhcnJhIGRlIHRpdHVsbyBkbyBhcHBcbiAgICAgKiBAYXV0aG9yIFdhbHRlciBHYW5kYXJlbGxhIDx3YWx0ZXIud2dibkBnbWFpbC5jb20+XG4gICAgICogQG1lbWJlcm9mIGpzZGF5XG4gICAgICogQHZlcnNpb24gMS4wLjBcbiAgICAgKi9cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2pzZGF5JylcbiAgICAgICAgLmRpcmVjdGl2ZSgnanNkYXlBcHBCYXInLCBqc2RheUFwcEJhcik7XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YganNkYXlcbiAgICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAgICogQHNjb3BlIHt9XG4gICAgICogQHJlc3RyaWN0IEVcbiAgICAgKiBAbmFtZSBqc2RheUFwcEJhclxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqICAgRXhpYmUgdW1hIGJhcnJhIGNvbXVtIHF1ZSBwb2RlIG91IG7Do28gY29udGFyIHVtIGJvdMOjbyB2b2x0YXJcbiAgICAgKlxuICAgICAqIEBhdHRyIHtCb29sZWFufSBiYWNrIEZsYWcgcXVlIGF0aXZhIG91IG7Do28gbyBib3TDo28gdm9sdGFyIFt0cnVlfGZhbHNlXVxuICAgICAqIEBhdHRyIHtFeHByZXNzaW9ufSBhY2FvIEZ1bsOnw6NvIHF1ZSBzZXLDoSBleGVjdXRhZGEgYW8gY2xpY2FyIG5vIGJvdMOjbyB2b2x0YXJcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogICBVc2FnZTpcbiAgICAgKiAgIDxqc2RheS1hcHAtYmFyIGJhY2s9XCJmYWxzZVwiPjwvanNkYXktYXBwLWJhcj5cbiAgICAgKlxuICAgICAqICAgPGpzZGF5LWFwcC1iYXIgYmFjaz1cInRydWVcIiBhY2FvPVwiZnVuYygpXCI+PC9qc2RheS1hcHAtYmFyPlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGpzZGF5QXBwQmFyICgpIHtcbiAgICAgICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlcy9qc2RheS1hcHAtYmFyLmh0bWwnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBiYWNrOiAnPScsXG4gICAgICAgICAgICAgICAgYWNhbzogJyYnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udHJvbGxlcjogYXBwQmFyQ3RybFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBkaXJlY3RpdmU7XG4gICAgfVxuXG4gICAgYXBwQmFyQ3RybC4kaW5qZWN0ID0gWyckc2NvcGUnXTtcblxuICAgIC8qKlxuICAgICAqIEzDs2dpY2EgZGEgZGlyZXRpdmEganNkYXlBcHBCYXJcbiAgICAgKiBAbWVtYmVyb2YganNkYXlBcHBCYXJcbiAgICAgKiBAcGFyYW0ge3NlcnZpY2V9ICRzY29wZSAgRXNjb3BvIGRvIGNvbnRyb2xsZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcHBCYXJDdHJsICgkc2NvcGUpIHtcbiAgICAgICAgJHNjb3BlLmJhY2sgPSAkc2NvcGUuYmFjayB8fCBmYWxzZTtcbiAgICAgICAgJHNjb3BlLnZvbHRhckNsaWNrID0gX3ZvbHRhckNsaWNrO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGdW7Dp8OjbyBxdWUgY2FwdHVyYSBvIGNsaXF1ZSBubyBib3TDo28gdm9sdGFyIGUgZGVsZWdhIHBhcmEgYSBmdW7Dp8OjbyBwYXNzYWRhIG5vIGVzY29wb1xuICAgICAgICAgKiBAbWVtYmVyb2YganNkYXlBcHBCYXJcbiAgICAgICAgICogQGZ1bmN0aW9uIF92b2x0YXJDbGlja1xuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gX3ZvbHRhckNsaWNrICgpIHtcbiAgICAgICAgICAgICRzY29wZS5hY2FvKCk7XG4gICAgICAgIH1cbiAgICB9XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCl7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24gRGlyZWN0aXZhIHF1ZSBjcmlhIG5vdmFzIG5vdGFzXG4gICAgICogQGF1dGhvciBXYWx0ZXIgR2FuZGFyZWxsYSA8d2FsdGVyLndnYm5AZ21haWwuY29tPlxuICAgICAqIEBtZW1iZXJvZiBqc2RheVxuICAgICAqIEB2ZXJzaW9uIDEuMC4wXG4gICAgICovXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdqc2RheScpXG4gICAgICAgIC5kaXJlY3RpdmUoJ2pzZGF5Tm92YU5vdGEnLCBqc2RheU5vdmFOb3RhKTtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBqc2RheU5vdmFOb3RhXG4gICAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgICAqIEBzY29wZSB7fVxuICAgICAqIEByZXN0cmljdCBFXG4gICAgICogQG5hbWUganNkYXlTZW1Db250ZXVkb1xuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqICAgRXhpYmUgdW1hIGNhaXhhIG9uZGUgbyB1c3XDoXJpbyBwb2RlIGNyaWFyIHVtYSBub3ZhIG5vdGFcbiAgICAgKlxuICAgICAqIEBhdHRyIHtTdHJpbmd9IHBhbGVzdHJhIEEgY2hhdmUgKGtleSkgZGEgcGFsZXN0cmEgYSBxdWUgYSBub3RhIHBlcnRlbmNlXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICAgVXNhZ2U6XG4gICAgICogICA8anNkYXktbm92YS1ub3RhIHBhbGVzdHJhPVwia2V5XCI+PC9qc2RheS1ub3ZhLW5vdGE+XG4gICAgICovXG4gICAgZnVuY3Rpb24ganNkYXlOb3ZhTm90YSAoKSB7XG4gICAgICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvanNkYXktbm92YS1ub3RhLmh0bWwnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBwYWxlc3RyYTogJz0nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udHJvbGxlcjogY3RybE5vdmFOb3RhXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgICB9XG5cbiAgICBjdHJsTm92YU5vdGEuJGluamVjdCA9IFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnbm90ZVNlcnZpY2UnXTtcblxuICAgIC8qKlxuICAgICAqIEzDs2dpY2EgZGEgZGlyZXRpdmEganNkYXlOb3ZhTm90YVxuICAgICAqIEBtZW1iZXJvZiBqc2RheU5vdmFOb3RhXG4gICAgICogQHBhcmFtIHtzZXJ2aWNlfSAkc2NvcGUgIEVzY29wbyBkbyBjb250cm9sbGVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3RybE5vdmFOb3RhICgkc2NvcGUsICRyb290U2NvcGUsIG5vdGVTZXJ2aWNlKSB7XG4gICAgICAgICRzY29wZS50ZXh0byA9IFwiXCI7XG4gICAgICAgICRzY29wZS5zYWx2YXJDbGljayA9IF9zYWx2YXJDbGljaztcblxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZ1bsOnw6NvIHF1ZSBjYXB0dXJhIG8gY2xpcXVlIGRhIGNhaXhhIGUgc2FsdmEgYSBub3RhIG5vIGJhbmNvIGxvY2FsXG4gICAgICAgICAqIEBtZW1iZXJvZiBqc2RheU5vdmFOb3RhXG4gICAgICAgICAqIEBmdW5jdGlvbiBfc2FsdmFyQ2xpY2tcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIF9zYWx2YXJDbGljayAoKSB7XG4gICAgICAgICAgICBub3RlU2VydmljZS5hZGQoJHNjb3BlLnBhbGVzdHJhLCAkc2NvcGUudGV4dG8pXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ25vdGFBZGRlZCcsIHtwYWxlc3RyYTogJHNjb3BlLnBhbGVzdHJhfSk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS50ZXh0byA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKXtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbiBEaXJlY3RpdmEgcXVlIGV4aWJlIGEgbGlzdGEgZGUgcGFsZXN0cmFzXG4gICAgICogQGF1dGhvciBXYWx0ZXIgR2FuZGFyZWxsYSA8d2FsdGVyLndnYm5AZ21haWwuY29tPlxuICAgICAqIEBtZW1iZXJvZiBqc2RheVxuICAgICAqIEB2ZXJzaW9uIDEuMC4wXG4gICAgICovXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdqc2RheScpXG4gICAgICAgIC5kaXJlY3RpdmUoJ2pzZGF5UGFsZXN0cmFzJywganNkYXlQYWxlc3RyYXMpO1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIGpzZGF5XG4gICAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgICAqIEBzY29wZSB7fVxuICAgICAqIEByZXN0cmljdCBFXG4gICAgICogQG5hbWUganNkYXlQYWxlc3RyYXNcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiAgIEV4aWJlIHVtYSBwYWxlc3RyYSBuYSB0aW1lbGluZSBkbyBldmVudG9cbiAgICAgKlxuICAgICAqIEBhdHRyIHtPYmplY3R9IHBhbGVzdHJhIE8gb2JqZXRvIHF1ZSByZXByZXNlbnRhIGEgcGFsZXN0cmEgYSBzZXIgZXhpYmlkYVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgIFVzYWdlOlxuICAgICAqICAgPGpzZGF5LXBhbGVzdHJhcyBwYWxlc3RyYT1cInBhbGVzdHJhXCI+PC9qc2RheS1wYWxlc3RyYXM+XG4gICAgICovXG4gICAgZnVuY3Rpb24ganNkYXlQYWxlc3RyYXMgKCkge1xuICAgICAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL2pzZGF5LXBhbGVzdHJhcy5odG1sJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgcGFsZXN0cmE6ICc9J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IGN0cmxQYWxlc3RyYXNcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZGlyZWN0aXZlO1xuICAgIH1cblxuICAgIGN0cmxQYWxlc3RyYXMuJGluamVjdCA9IFsnJHNjb3BlJywgJyRzdGF0ZScsICdVdGlscyddO1xuXG4gICAgLyoqXG4gICAgICogTMOzZ2ljYSBkYSBkaXJldGl2YSBqc2RheVBhbGVzdHJhc1xuICAgICAqIEBtZW1iZXJvZiBqc2RheVBhbGVzdHJhc1xuICAgICAqIEBwYXJhbSB7c2VydmljZX0gJHNjb3BlICBFc2NvcG8gZG8gY29udHJvbGxlclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN0cmxQYWxlc3RyYXMgKCRzY29wZSwgJHN0YXRlLCBVdGlscykge1xuICAgICAgICAkc2NvcGUucGFsZXN0cmEuaG9yYSA9IFV0aWxzLnBhcnNlVGltZVRvU3RyKCRzY29wZS5wYWxlc3RyYS5ob3JhKTtcbiAgICAgICAgJHNjb3BlLnBhbGVzdHJhQ2xpY2sgPSBfcGFsZXN0cmFDbGljaztcblxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGdW7Dp8OjbyBxdWUgY2FwdHVyYSBvIGNsaXF1ZSBuYSBwYWxlc3RyYSBlIGV4aWJlIGEgcMOhZ2luYSBkZSBkZXRhbGhlcyBkYSBtZXNtYVxuICAgICAgICAgKiBAbWVtYmVyb2YganNkYXlQYWxlc3RyYXNcbiAgICAgICAgICogQGZ1bmN0aW9uIF9wYWxlc3RyYUNsaWNrXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBfcGFsZXN0cmFDbGljayAoKSB7XG4gICAgICAgICAgICBpZiAoISRzY29wZS5wYWxlc3RyYS5zZXJ2aWNvKVxuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygncGFsZXN0cmEnLCB7a2V5OiAkc2NvcGUucGFsZXN0cmEuJGlkfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKXtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbiBEaXJlY3RpdmEgZGUgVGVsYSBkZSBmdW5kbyBkb3MgY29udGXDumRvcyB2YXppb3NcbiAgICAgKiBAYXV0aG9yIFdhbHRlciBHYW5kYXJlbGxhIDx3YWx0ZXIud2dibkBnbWFpbC5jb20+XG4gICAgICogQG1lbWJlcm9mIGpzZGF5XG4gICAgICogQHZlcnNpb24gMS4wLjBcbiAgICAgKi9cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2pzZGF5JylcbiAgICAgICAgLmRpcmVjdGl2ZSgnanNkYXlTZW1Db250ZXVkbycsIGpzZGF5U2VtQ29udGV1ZG8pO1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIGpzZGF5XG4gICAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgICAqIEBzY29wZSB7fVxuICAgICAqIEByZXN0cmljdCBFXG4gICAgICogQG5hbWUganNkYXlTZW1Db250ZXVkb1xuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqICAgRXhpYmUgdW0gZnVuZG8gYW1pZ8OhdmVsIHBhcmEgdGVsYXMgcXVlIGFpbmRhIG7Do28gcmVjZWJlcmFtIGNvbnRlw7pkb1xuICAgICAqXG4gICAgICogQGF0dHIge1N0cmluZ30gY29udGV1ZG8gTyB0aXBvIGRlIHRlbGEgcXVlIHJlY2ViZXLDoSBhIGRpcmV0aXZhIFtub3RhfGNvbWVudGFyaW9dXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICAgVXNhZ2U6XG4gICAgICogICA8anNkYXktc2VtLWNvbnRldWRvIGNvbnRldWRvPVwibm90YVwiPjwvanNkYXktc2VtLWNvbnRldWRvPlxuICAgICAqXG4gICAgICogICA8anNkYXktc2VtLWNvbnRldWRvIGNvbnRldWRvPVwiY29tZW50YXJpb1wiPjwvanNkYXktc2VtLWNvbnRldWRvPlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGpzZGF5U2VtQ29udGV1ZG8gKCkge1xuICAgICAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL2pzZGF5LXNlbS1jb250ZXVkby5odG1sJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgY29udGV1ZG86ICc9J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpbms6IGxpbmtTZW1Db250ZXVkbyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IGN0cmxTZW1Db250ZXVkb1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBkaXJlY3RpdmU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluaWNpYWxpemEgYSBkaXJldGl2YSBwYXJhIG1hbmlwdWxhciBvIERPTVxuICAgICAgICAgKiBAbWVtYmVyb2YganNkYXlTZW1Db250ZXVkb1xuICAgICAgICAgKiBAcGFyYW0ge3NlcnZpY2V9IHNjb3BlIHRoZSBzY29wZSBvZiB0aGlzIGVsZW1lbnRcbiAgICAgICAgICogQHBhcmFtIHtzZXJ2aWNlfSBlbCBlbGVtZW50IHRoYXQgdGhpcyBkaXJlY2l2ZSBpcyBhc3NpZ25lZCB0b1xuICAgICAgICAgKiBAcGFyYW0ge3NlcnZpY2V9ICAgYXR0ciBhdHRyaWJ1dGUgb2YgdGhpcyBlbGVtZW50XG4gICAgICAgICAqIEBwYXJhbSB7Y29udHJvbGxlcn0gdm0gbWFwIGNvbnRyb2xsZXJcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGxpbmtTZW1Db250ZXVkbyAoc2NvcGUsIGVsLCBhdHRyLCB2bSkge1xuICAgICAgICAgICAgdmFyIGFsdHVyYSA9ICQod2luZG93KS5oZWlnaHQoKSAtIDQ5IC0gMTQwIC0gKHNjb3BlLmNvbnRldWRvID09ICdub3RhJyA/IDY2IDogMCk7XG4gICAgICAgICAgICAkKCcuanNkYXktc2VtLWNvbnRldWRvJykuaGVpZ2h0KGFsdHVyYSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjdHJsU2VtQ29udGV1ZG8uJGluamVjdCA9IFsnJHNjb3BlJ107XG5cbiAgICAvKipcbiAgICAgKiBMw7NnaWNhIGRhIGRpcmV0aXZhIGpzZGF5U2VtQ29udGV1ZG9cbiAgICAgKiBAbWVtYmVyb2YganNkYXlTZW1Db250ZXVkb1xuICAgICAqIEBwYXJhbSB7c2VydmljZX0gJHNjb3BlICBFc2NvcG8gZG8gY29udHJvbGxlclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN0cmxTZW1Db250ZXVkbyAoJHNjb3BlKSB7XG4gICAgICAgIGlmICgkc2NvcGUuY29udGV1ZG8gPT0gJ25vdGEnKXtcbiAgICAgICAgICAgICRzY29wZS5sZWdlbmRhID0gXCJOZW5odW1hIG5vdGEgYWRpY2lvbmFkYVwiO1xuICAgICAgICAgICAgJHNjb3BlLmljb25lID0gXCJpbWcvbm90YXMucG5nXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkc2NvcGUubGVnZW5kYSA9IFwiTmluZ3XDqW0gY29tZW50b3UgYWluZGFcIjtcbiAgICAgICAgICAgICRzY29wZS5pY29uZSA9IFwiaW1nL2NoYXQucG5nXCI7XG4gICAgICAgIH1cbiAgICB9XG5cbn0pKCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
